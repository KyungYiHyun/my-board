<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.my_board.post.mapper.PostMapper">
    <insert id="createPost" parameterType="Post"
            useGeneratedKeys="true" keyProperty="id">
        INSERT INTO post(title, content, member_id, category_child_id, category_parent_id)
        VALUES (#{title}, #{content}, #{member_id}, #{categoryChildId}, #{categoryParentId})
    </insert>

    <select id="findById" parameterType="Long" resultType="GetPostResponse">
        SELECT p.id AS postId, m.nickname, p.title, p.content, p.views, p.created_at, p.modified_at, p.member_id,p.comment_count,
        CASE WHEN p.created_at != p.modified_at THEN true
        ELSE false END AS isEdited
        FROM post p
        JOIN member m
        ON p.member_id = m.id
        WHERE p.id = #{postId}
    </select>

    <!--    <select id="getAllPosts" resultType="GetAllPostResponse">
            SELECT p.id AS postId, p.title, m.nickname, p.views, p.created_at,
            (SELECT COUNT(*) FROM comments c WHERE c.post_id = p.id) AS commentCount,
            SUM(CASE WHEN pr.type = 'LIKE' THEN 1 ELSE 0 END) AS likeCount
            FROM post p
            JOIN member m
            ON p.member_id = m.id
            LEFT JOIN post_reaction pr
            ON p.id = pr.post_id
            <where>
                <if test="keyword != null and keyword != ''">
                    MATCH(p.title, p.content) AGAINST(#{keyword} IN BOOLEAN MODE)
                </if>
            </where>
            GROUP BY p.id, p.title, m.nickname, p.views, p.created_at
            ORDER BY ${sortIndex} ${orderType}
        </select>-->

    <!--    <select id="getAllPosts" resultType="GetAllPostResponse">
            SELECT p.id AS postId, p.title, m.nickname, p.views, p.created_at
            from post p
            <where>
                <if test="keyword != null and keyword != ''">
                    MATCH(p.title, p.content) AGAINST(#{keyword} IN BOOLEAN MODE)
                </if>
            </where>
            join member m on m.id = p.member_id
            left join
            (select post_id, count(*) as commentCount
            from comments
            group by post_id) c on c.post_id = p.id
            left join
            (select post_id, sum(case when type ='LIKE' then 1 else 0 end) as likeCount
            from post_reaction
            group by post_id) pr on pr.post_id = p.id
            order by ${sortIndex} ${orderType}
        </select>-->

    <!--<select id="getAllPostsByLike" resultType="GetAllPostResponse">
        SELECT p.id AS postId, p.title, m.nickname, p.views, p.created_at,
        (SELECT COUNT(*) FROM comments c WHERE c.post_id = p.id) AS commentCount,
        SUM(CASE WHEN pr.type = 'LIKE' THEN 1 ELSE 0 END) AS likeCount
        FROM post p
        JOIN member m
        ON p.member_id = m.id
        LEFT JOIN post_reaction pr
        ON p.id = pr.post_id
        <where>
            <if test="keyword != null and keyword != ''">
                (p.title LIKE CONCAT('%', #{keyword}, '%') OR p.content LIKE CONCAT('%', #{keyword}, '%'))
            </if>
        </where>

        GROUP BY p.id, p.title, m.nickname, p.views, p.created_at
        ORDER BY ${sortIndex} ${orderType}
    </select>-->

    <select id="getAllPosts" resultType="GetAllPostResponse">
        SELECT p.id AS postId, p.title, m.nickname, p.views, p.created_at, p.comment_count as commentCount,
        p.like_count AS likeCount, cc.name AS categoryChildName
        from post p
        join member m on m.id = p.member_id
        join category_child cc on p.category_child_id = cc.id
        <where>
            <if test="categoryChild != '' and categoryChild != null">
                p.category_child_id = (select id
                from category_child cc
                where cc.name = #{categoryChild})
            </if>
            <if test="keyword != null and keyword != ''">
                <if test="categoryChild != null and categoryChild != ''">
                    AND
                </if>
                MATCH(p.title, p.content) AGAINST(#{keyword} IN BOOLEAN MODE)
            </if>
        </where>
        order by ${sortIndex} ${orderType}
    </select>


    <delete id="deletePost" parameterType="Long">
        DELETE
        FROM post
        WHERE id = #{postId}
    </delete>

    <update id="updatePost">
        UPDATE post
        SET title = #{post.title},
        content = #{post.content}
        WHERE id = #{postId}
    </update>

    <update id="incrementView" parameterType="Long">
        UPDATE post
        SET views = views + 1
        WHERE id = #{postId}
    </update>


</mapper>